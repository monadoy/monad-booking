openapi: 3.0.0
servers:
  - url: 'http://example.inv/api/v1/'
info:
  description: >-
    This is a simple interface for configuring M5Booking E-Ink displays. the
    display will host this interface when initially setting up and later when entering
    configuration mode.


    Note that currently the server only supports GET and POST HTTP-methods.
  version: 0.0.1
  title: M5Booking 
tags:
  - name: config
    description: Configuration related stuff
paths:
  /config:
    post:
      tags:
        - config
      summary: Save configuration
      description: 'Save new configuration to flash'
      operationId: saveConfig
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Configuration'
    get:
      tags:
        - config
      summary: Get current configuration variables
      description: 'Outputs current config from flash'
      operationId: getConfig
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
        '404':
          description: No configuration currently saved
        '405':
          description: Validation exception
externalDocs:
  description: M5Booking Gitlab
  url: 'https://gitlab.com/monadoy/internal/m5paper-room-booking/'
components:
  requestBodies:
    Configuration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Configuration'
      description: Configuration object
      required: true
  schemas:
    Configuration:
      title: Configuration
      description: Configuration for WiFi-credentials, timezone etc. 
      type: object
      required:
        - wifi
        - gcalsettings
        - timezone
        - name
        - awake
      properties:
        name:
          type: string
          example: My awesome E-ink display
        timezone:
          type: string
          format: IANA
        gcalsettings:
          type: object
          $ref: '#/components/schemas/GoogleCalendarSettings'
        wifi:
          type: object
          $ref: '#/components/schemas/WiFiSettings'
        awake:
          type: object
          description: > 
            Days and hours that the device will be awake. Othervise it will
            sleep to save power
          properties:
            time:
              type: object
              description: Hours of the day between the device should be awake
              properties:
                from: 
                  type: string
                  format: "hours:$minutes"
                to:
                  type: string
                  format: "hours:$minutes"
            weekdays:
              type: object
              description: True if device should wake up that day
              properties:
                mon:
                  type: boolean
                tue:
                  type: boolean
                wed:
                  type: boolean
                thu:
                  type: boolean
                fri:
                  type: boolean
                sat:
                  type: boolean
                sun:
                  type: boolean
            
    WiFiSettings:
      title: WiFi settings
      description: SSID and password
      required:
        - ssid
        - password
      properties:
        ssid:
          type: string
          example: Monad
        password:
          type: string
          example: aw3s0mep4as5
    GoogleCalendarSettings:
      title: Google Calendar settings
      description: Settings for Google calendar
      required:
        - token
        - calendarid
      properties:
        calendarid:
          type: string
          example: c_4214...214@resource.calendar.google.com
        token:
          type: object
          example: token.json for Google Cloud