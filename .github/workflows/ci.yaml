name: Build & Deploy on Version Tag

on: [push]

jobs:
  build-firmware:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Set up Python with cache
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install Python requirements
        run: pip install -r ./scripts/requirements.txt

      - name: Build the firmware
        run: pio run -e m5paper

      - name: Store firmware artifact
        uses: actions/upload-artifact@v3
        with:
          name: firmware
          path: .pio/build/m5paper/firmware.bin

  build-file-system:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python with cache
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install Python requirements
        run: pip install -r ./scripts/requirements.txt

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: webPortalFrontend/package-lock.json

      - name: Build frontend
        run: python ./scripts/setup.py frontend

      - name: Store file system artifact
        uses: actions/upload-artifact@v3
        with:
          name: file-system
          path: data
  deploy:
    runs-on: ubuntu-latest
    needs: [build-firmware, build-file-system]
    if: startsWith(github.ref, 'refs/tags/v') # Runs only on tag push starting with 'v'
    steps:
      - uses: actions/checkout@v3

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Verify that platformio.ini defines the same version as the tag
        run: |
          MAJOR="$(cut -d'.' -f1 <<< '${{ steps.tag.outputs.tag }}')"
          MINOR="$(cut -d'.' -f2 <<< '${{ steps.tag.outputs.tag }}')"
          PATCH="$(cut -d'.' -f3 <<< '${{ steps.tag.outputs.tag }}')"
          grep "\-DVERSION_MAJOR=$MAJOR" ./platformio.ini
          grep "\-DVERSION_MINOR=$MINOR" ./platformio.ini
          grep "\-DVERSION_PATCH=$PATCH" ./platformio.ini

      - name: Download firmware artifact
        uses: actions/download-artifact@v3
        with:
          name: firmware
          path: ./artifacts

      - name: Download file system artifact
        uses: actions/download-artifact@v3
        with:
          name: file-system
          path: ./artifacts/data

      - run: mkdir ./v${{ steps.tag.outputs.tag }}

      - name: Move firmware
        run: mv ./artifacts/firmware.bin ./v${{ steps.tag.outputs.tag }}/firmware.bin

      - name: Compress file system
        working-directory: ./artifacts/data
        run: tar -czvf ../../v${{ steps.tag.outputs.tag }}/file-system.tar.gz ./*

      - name: Make current-version file
        run: echo -n ${{ steps.tag.outputs.tag }} > current-version

      - name: Authorize account for Google Storage
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Upload to Google Storage bucket
        uses: "google-github-actions/upload-cloud-storage@v0"
        with:
          path: "./v${{ steps.tag.outputs.tag }}"
          destination: "no-booking-binaries"

      - name: Update current-version in Google Storage bucket
        uses: "google-github-actions/upload-cloud-storage@v0"
        with:
          path: "./current-version"
          destination: "no-booking-binaries"
          headers: |-
            content-type: text/plain
